// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, phone, email, password_hash, private_contact, about_description) VALUES ($1,$2,$3,$4,$5,$6) RETURNING id, name, password_hash, phone, email, private_contact, about_description
`

type CreateUserParams struct {
	Name             string `json:"name"`
	Phone            string `json:"phone"`
	Email            string `json:"email"`
	PasswordHash     string `json:"password_hash"`
	PrivateContact   bool   `json:"private_contact"`
	AboutDescription string `json:"about_description"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Phone,
		arg.Email,
		arg.PasswordHash,
		arg.PrivateContact,
		arg.AboutDescription,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Phone,
		&i.Email,
		&i.PrivateContact,
		&i.AboutDescription,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, password_hash, phone, email, private_contact, about_description FROM users WHERE id=$1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Phone,
		&i.Email,
		&i.PrivateContact,
		&i.AboutDescription,
	)
	return i, err
}

const updateUserDescription = `-- name: UpdateUserDescription :one
UPDATE users
SET about_description = $1
WHERE id = $2
RETURNING id, name, password_hash, phone, email, private_contact, about_description
`

type UpdateUserDescriptionParams struct {
	AboutDescription string `json:"about_description"`
	ID               int64  `json:"id"`
}

func (q *Queries) UpdateUserDescription(ctx context.Context, arg UpdateUserDescriptionParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserDescription, arg.AboutDescription, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Phone,
		&i.Email,
		&i.PrivateContact,
		&i.AboutDescription,
	)
	return i, err
}
